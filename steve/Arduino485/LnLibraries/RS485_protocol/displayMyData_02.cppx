
#include "LnRS485_protocol.h"

// #############################################################
// # const char* text : per ricevere una stringa constante es: "Loreto"
// #############################################################
void displayMyData(const char *caller, byte rCode, RXTX_DATA *pData) {
    const byte *data;
    const byte *raw;
    // byte fPrintData = false;
    byte  rawIndex=0;


    byte fDisplayFullData = false;
    byte fDisplayHeader   = (pData->fDisplayMyData + pData->fDisplayOtherHeader + pData->fDisplayOtherFull + pData->fDisplayRawData);
    byte fDisplayRawData  = pData->fDisplayRawData;

        // la base ...
    if (! fDisplayHeader) return;


    // Serial.print(F("\n\n"));
    raw = pData->raw;
    if (caller[0] == 'T') {
        data = pData->tx;
        // Serial.print(F("\n\nTX TX TX"));
    }
    else if (caller[0] == 'R'){
        data = pData->rx;
        // Serial.print(F("\n\nRX RX RX"));
    }
    else
        return;
    int seqNo = data[fld_SEQNO_LOW] + data[fld_SEQNO_HIGH]*256;
    // --- HEADER START -----
    if (fDisplayHeader) {
        Serial.println();
        Serial.print(pData->myID);
            Serial.print(caller);
            Serial.print(F(" - 0x"));       printHex(data[fld_SENDER_ADDR]);
            Serial.print(F("-->0x"));       printHex(data[fld_DESTINATION_ADDR]);
            Serial.print(F(" - SeqNO: "));  Serial.print(Utoa(seqNo, 5, '0') );

            // - Occupa molta più memoria (almeno 150 byte in più)
                // char *ptr = joinStr(pData->myID, caller, " - 0x", D2X(data[fld_SENDER_ADDR], 2), " --> 0x",D2X(data[fld_DESTINATION_ADDR], 2), "/",Utoa(data[fld_DESTINATION_ADDR], 3, '0'),"] - SeqNO: ", Utoa(seqNo, 5, '0'), NULL);
                // Serial.print(ptr);

            byte isItForMe = (myEEpromAddress == data[fld_DESTINATION_ADDR]) + (myEEpromAddress == data[fld_SENDER_ADDR]);
            if (isItForMe) {
                Serial.print(F(" - [WOW it's for me...]"));
                fDisplayFullData = true;
            }
            else {
                Serial.print(F(" - [it's NOT for me...]"));
                if (pData->fDisplayOtherFull) fDisplayFullData = true;
            }

            if (caller[0] == 'R') {
                Serial.print(F(" - [rcvdCode: "));
                Serial.print(errMsg[rCode]);
                Serial.print(']');
            }
    } // --- HEADER END -----



    byte rawLen  = raw[0];
    // if (fDisplayRawData) {
        if (rawLen > 0) {
            rawIndex = fld_COMMAND_DATA*2;
            Serial.println();
            Serial.print(TAB4);Serial.print(F("full raw - len:["));Serial.print(Utoa(raw[0], 3, '0'));Serial.print(F("] - "));
            Serial.print(TAB4);printHex((char *) &raw[fld_DATALEN+1], raw[fld_DATALEN]); //Serial.println();

            // Serial.println();
            // Serial.print(TAB4);Serial.print(F("CMD  raw -      "));;Serial.print(Utoa(raw[0], 3, '0'));
            // Serial.print(TAB4);printHex((char *) &raw[rawIndex], rawLen-rawIndex-2);//Serial.println();

        }
    // }


    byte dataLen = data[fld_DATALEN];
    if (dataLen > 0) {
        // int seqNo = data[fld_SEQNO_LOW] + data[fld_SEQNO_HIGH]*256;
        Serial.print(TAB4);Serial.print(F( "SENDER      0x: "));printHex(data[fld_SENDER_ADDR]);
        Serial.print(TAB4);Serial.print(F( "DEST        0x: "));printHex(data[fld_DESTINATION_ADDR]);
        Serial.print(TAB4);Serial.print(F( "SEQNO       0x: "));printHex((char *) &data[fld_SEQNO_HIGH], 2);Serial.print(" ");Serial.print(seqNo);
        Serial.print(TAB4);Serial.print(F( "CMD_RCode   0x: "));printHex(data[fld_CMD_RCODE]);
        Serial.print(TAB4);Serial.print(F( "CMD/subCMD  0x: "));printHex(data[fld_COMMAND]);Serial.print(" ");printHex(data[fld_SUBCOMMAND]);
        // COMMAND_DATA
        byte lun=dataLen-fld_SUBCOMMAND;
        Serial.println("");
        Serial.print(TAB4);Serial.print(F("DATA        ["));Serial.print(Utoa(lun, 3, '0'));Serial.print(F("] - "));
        // printNchar(' ', fld_SUBCOMMAND*3);
        printHex((char *) &data[fld_COMMAND_DATA], lun);
    }
    Serial.print(F("\n\n"));

    // printHexPDS( "calculated CRC3b: ", pData->Tx_CRCcalc, "\n");
}
