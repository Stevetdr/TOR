// programma di SS
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "PCF8574.h"
#include "DS3232RTC.h"
#include <string.h>
#include <stdio.h>

#define DS3231_I2C_ADDRESS      0x68    // i2c 0x68 del DS3231
#define DS3231_TEMPERATURE_ADDR 0x11    // indirizzo della memoria interna

LiquidCrystal_I2C lcd(0x23,16,2);       // i2c 0x38 LCD 16x2
PCF8574 tastiera(0x25);                 // i2c 0x25 per gestione tastiera con PCF8574

int Key_Press = 0;          // per tastiera
uint8_t value = 0;          // per tastiera
uint8_t value1 = 0;         // per tastiera
int i = 0;
int col = 0;                // per LCD
int linea = 0;              // per LCD
int lung;                // intero senza segno
int flag = 0; float gradiC = 0;
// sotto tutti i registri fino a 0x12 del DS3231
byte Rseconds = 0; byte Rminutes = 0; byte Rhours = 0; byte Rdayof = 0;
byte Rday = 0; byte Rmonth = 0; byte Ryear = 0;
byte R07 = 0; byte R08 = 0; byte R09 = 0; byte R0A = 0; byte R0B = 0; byte R0C = 0;
byte R0D = 0; byte R0E = 0; byte R0F = 0; byte R10 = 0; byte R11 = 0; byte R12 = 0;

// character from 0 to 7 special to build 5x7 pixel
uint8_t gradi[8]    = {0x0C,0x0C,0x07,0x08,0x08,0x07,0x00};
uint8_t clock[8]    = {0x00,0x0E,0x15,0x17,0x11,0x0E,0x00};
uint8_t heart[8]    = {0x00,0x0A,0x1F,0x1F,0x0E,0x04,0x00};
uint8_t check[8]    = {0x00,0x01,0x03,0x16,0x1C,0x08,0x00};
uint8_t retarrow[8] = {0x01,0x01,0x05,0x09,0x1F,0x08,0x04};
uint8_t uparrow[8]  = {0x00,0x04,0x0E,0x15,0x04,0x04,0x00};
uint8_t dnarrow[8]  = {0x00,0x04,0x04,0x15,0x0E,0x04,0x00};
uint8_t riarrow[8]  = {0x00,0x04,0x02,0x1F,0x02,0x04,0x00};

char testo[] = "Irrigazione V105";
float gradiDS = 0;    // per conversione dei gradi
char stringa[15];   // per conversione dei gradi  ma da capire
//-----------------------------------------------------------------------------
void setup() {
    Serial.begin(9600);             // apri il canale Seriale per output
    lcd.init();                     // inizializza  lcd
    pinMode(12, OUTPUT);            // pin abilitato per verificare il flag timer
    //setDS3231time(30,33,18,1,26,02,19); // sec min ore giorno_sett day month year
    //timeSS(); // solo per un campo

    //======define charset
    lcd.createChar(0, gradi); // Sends the custom char to lcd
    lcd.createChar(1, clock);
    lcd.createChar(2, heart);
    lcd.createChar(3, check);
    lcd.createChar(4, retarrow);    // freccia return
    lcd.createChar(5, uparrow);     // freccia in su
    lcd.createChar(6, dnarrow);     // freccia in giu
    lcd.createChar(7, riarrow);     // freccia a destra

    setAlarm1();                // abilita i bit del DS3231 per ottenere allarme di un secondo

    WriteString(testo, 0, 0); // serve per vedere la versione
    delay(1000);

    schermata_zero();

}
//-----------------------------------------------------------------------------
void loop() {                                           // programma principale

    Key_Press = Read_Keyboard();    // Legge la tastiera
    if (Key_Press != 0) {       // se ritorna 0, continua il loop altrimenti
        MenuPrincipale();       // vai al menu principale per le selezioni
    }

    WriteTime(8, 1);            // visualizza sulla line 1 l'ora -> HH:MM:SS
    delay(200);                 // delay

    flag = CheckAlarm();
    if (flag == 1) {
        digitalWrite(12, HIGH); // led acceso
        //Serial.println(" pulito il flag");
        clearA1F();
        flag = 0;
        //displayTime();
        delay(200);                 // delay
        digitalWrite(12, LOW); // led spento
        gradiC = DS3231_get_treg();  // legge la temperatura della sonda
        lcd.setCursor(0,1); // prima posizione linea 2
        lcd.print((char)0); // stampa Â°C
        stampaGradi(gradiC, col, linea);    // su LCD i gradi dal col su linea
        lcd.setCursor(7,1);    // posizione dell' orologio
        lcd.print((char)1);     // carattere orologio

    }
   //int tempC = DS3231_get_treg();  // Reads the temperature as an int, to save memory
   // float tempC = DS3231_get_treg();
}
//-----------------------------------------------------------------------------

//*****************************************************************************
//*****************************************************************************
int Read_Keyboard(void) {       // ritorna 0 se nessun tasto premuto o il valore del tasto
    value = tastiera.read8();       // legge la tastiera con i2c
    if (value != 0) {               // esame di quanto letto, se e' stato premuto
        value1 = value;             // salva il valore
        delay(300);                 // delay
    }
    else
        { return value; }           // altrimenti value=0, nessun tasto premuto!
                                    // attesa che il pulsante venga rilasciato
    value = tastiera.read8();       // rilegge per avere ancora il valore
    while(value!=0) {               // se diverso da 0, pulsante premuto
        delay(50);                  // ritardo
        value = tastiera.read8();   // rilegge
    }
    return value1;                  // ritorna il valore del tasto premuto
}
//-----------------------------------------------------------------------------
void MenuPrincipale(void) { // loop sulle possibili scelte del menu

    char testo2[] = "Modifica  ora   "; // visualizza CAMBIO ORA --------------
    WriteString(testo2, 0, 0);

    char testo3[] = "                ";
    WriteString(testo3, 0, 1);
    lcd.setCursor(1,1);     // posizione dello skip
    lcd.print((char)7);     // carattere skip
    lcd.setCursor(14,1);    // posizione dell' enter
    lcd.print((char)4);     // carattere enter

    Key_Press = 0;  // reset
    while (Key_Press == 0) {        // se e' vera esegue le istruzioni dentro le graffe
        Key_Press = Read_Keyboard();
    }
    if (Key_Press == 8) {
        Serial.println("premuto skip1");
        // andare alla gestione del cambio ora
    }

    char testo4[] = "Modifica  data  "; // visualizza CAMBIO DATA -------------
    WriteString(testo4, 0, 0);

    Key_Press = 0;  // reset
    while (Key_Press == 0) {
        Key_Press = Read_Keyboard();
    }
    if (Key_Press == 8) {
        Serial.println("premuto skip2");
        // andare alla gestione del cambio ora
    }
    char testo5[] = "Ena/Disa rele'  "; // Ena/Disa rele ----------------------
    WriteString(testo5, 0, 0); // testo5

    Key_Press = 0;  // reset
    while (Key_Press == 0) {
        Key_Press = Read_Keyboard();
    }
    if (Key_Press == 8) {
        Serial.println("premuto skip3");
        // andare alla gestione del cambio ora
    }
    char testo6[] = "Cambia ora pompe"; // Cambia orario pompe start stop -----
    WriteString(testo6, 0, 0);

    Key_Press = 0;  // reset
    while (Key_Press == 0) {
        Key_Press = Read_Keyboard();
    }
    if (Key_Press == 8) {
        Serial.println("premuto skip4");
        // andare alla gestione del cambio ora
    }
    // ----------------------------------- ripristina schermata di partenza ---
    schermata_zero();
}
    //WriteString(orario, 0, 1);
//-----------------------------------------------------------------------------
void schermata_zero(void) {     // stampa la schermata iniziale
    char testo1[]  = "Premi un tasto  ";
    WriteString(testo1, 0, 0);      // va alla stampa
    lcd.setCursor(7,1); lcd.print((char)1);   // posizione dell' orologio
    lcd.setCursor(10,1); lcd.print(":"); // due punti orario
    lcd.setCursor(13,1); lcd.print(":"); // "
    WriteTime(8, 1);            // visualizza sulla line 1 l'ora -> HH:MM:SS
    displayRegDS3231();     // visualizza tutti i registri del DS               dopo da togliere
}
//-----------------------------------------------------------------------------
void setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek, byte
dayOfMonth, byte month, byte year) {
    // sets time and date data to DS3231
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0);                // set next input to start at the seconds register
    Wire.write(decToBcd(second));       // 0 set seconds
    Wire.write(decToBcd(minute));       // 1 set minutes
    Wire.write(decToBcd(hour));         // 2 set hours
    Wire.write(decToBcd(dayOfWeek));    // 3 set day of week (1=Sunday, 7=Saturday)
    Wire.write(decToBcd(dayOfMonth));   // 4 set date (1 to 31)
    Wire.write(decToBcd(month));        // 5 set month
    Wire.write(decToBcd(year));         // 6 set year (0 to 99)
    Wire.endTransmission();
}
//-----------------------------------------------------------------------------
void setAlarm1(void) {  // setta allarme da fare alla partenza
    Wire.beginTransmission(DS3231_I2C_ADDRESS);

    Wire.write(0x07);                   // si posiziona sul byte 07

    Wire.write(0x80);                   // 7 ON A1M1 per Alarm 1 - abilita INT/SQL ogni secondo
    Wire.write(0x80);                   // 8 ON A1M2 per Alarm 1 -  si deve mettere a posto nel
    Wire.write(0x80);                   // 9 ON A1M3 per Alarm 1 - reg 0x0E il bit 2 e il bit 0
    Wire.write(0x80);                   // A ON A1M4 per Alarm 1 -

    Wire.write(0x00);                   // B ON A2M2 per Alarm 2 -
    Wire.write(0x00);                   // C ON A2M3 per Alarm 2 -
    Wire.write(0x00);                   // D ON A2M4 per Alarm 2 -

    Wire.endTransmission();
    // - - - - - - - - - - - - - - - - - - - - - - -
                                // deve mettere a 1 il bit0 e bit2 del reg 0E
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0x0E);                    // si posiziona sul byte 0E
    Wire.requestFrom(DS3231_I2C_ADDRESS, 1);    // richiede la lettura di un byte
    //Serial.print("lettura prima : ");Serial.println(Wire.read(),HEX);
    Wire.write(0x1D);
    Wire.endTransmission();

    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0x0E);                    // si posiziona sul byte 0E
    Wire.requestFrom(DS3231_I2C_ADDRESS, 1);    // richiede la lettura di un byte
    //Serial.print("lettura dopo : "); Serial.println(Wire.read(),HEX);
    Wire.endTransmission();
}
//-----------------------------------------------------------------------------
int CheckAlarm() {
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0x0F);       // inizia a scrivere/leggere dal registro 0F
    Wire.requestFrom(DS3231_I2C_ADDRESS, 1);    // richiede la lettura di un byte

    while(Wire.available()) {
        if ((Wire.read() && 0x01) == 1) {     // legge il byte 0F
            flag = 1;
        }          // mette il bit0=0
    }
    Wire.endTransmission();
    return(flag);
}
//-----------------------------------------------------------------------------
void clearA1F(void) {    // azzera il flag A1F dopo allarme o per il prossimo
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0x0F);       // inizia a scrivere/leggere dal registro 0F
    Wire.requestFrom(DS3231_I2C_ADDRESS, 1);    // richiede la lettura di un byte

    while(Wire.available()) {
        char tmp = Wire.read();     // legge il byte 0F
        tmp = tmp && 0xFE;          // mette il bit0=0
        Wire.write(tmp);            // lo riscrive per riabilitarlo
    }
    Wire.endTransmission();
}
//---------- per correzione tempo su orologio in un solo campo ----------------
void timeSS() {
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(3); // set next input to start at the seconds register
    Wire.write(05); // set
    Wire.endTransmission();
}
//-----------------------------------------------------------------------------
void readDS3231time(byte *second,byte *minute,byte *hour,byte *dayOfWeek,
byte *dayOfMonth,byte *month,byte *year) {
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0); // set DS3231 register pointer to 00h
    Wire.endTransmission();                                                 //???? dubbi, e' corretto?
    Wire.requestFrom(DS3231_I2C_ADDRESS, 7); // request seven bytes of data requestFrom    // non dovrebbe essere prima?
                                             //DS3231 starting from register 00h
    *second = bcdToDec(Wire.read() & 0x7f);
    *minute = bcdToDec(Wire.read());
    *hour = bcdToDec(Wire.read() & 0x3f);
    *dayOfWeek = bcdToDec(Wire.read());
    *dayOfMonth = bcdToDec(Wire.read());
    *month = bcdToDec(Wire.read());
    *year = bcdToDec(Wire.read());
}
//-----------------------------------------------------------------------------
// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val) { return( (val/10*16) + (val%10) );}
//-----------------------------------------------------------------------------
// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val) { return( (val/16*10) + (val%16) );}
//-----------------------------------------------------------------------------
void displayTime() {
    byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;
    // retrieve data from DS3231
    readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month, &year);
    // send it to the serial monitor
    Serial.print(hour, DEC);
    // convert the byte variable to a decimal number when displayed
    Serial.print(":");
    if (minute<10) {
        Serial.print("0");
    }
    Serial.print(minute, DEC);
    Serial.print(":");
    if (second<10) {
        Serial.print("0");
    }
    Serial.print(second, DEC);
    Serial.print(" ");
    Serial.print(dayOfMonth, DEC);
    Serial.print("/");
    Serial.print(month, DEC);
    Serial.print("/");
    Serial.print(year, DEC);
    Serial.print(" Giorno della settimana: ");
    switch(dayOfWeek){
        case 1:
            Serial.println("domenica");
            break;
        case 2:
            Serial.println("lunedi'");
            break;
        case 3:
            Serial.println("martedi'");
            break;
        case 4:
            Serial.println("mercoledi'");
            break;
        case 5:
            Serial.println("giovedi'");
            break;
        case 6:
            Serial.println("venerdi'");
            break;
        case 7:
            Serial.println("sabato");
            break;
    }
}
//-----------------------------------------------------------------------------   *****
void displayRegDS3231() {
    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(0x00);
    Wire.endTransmission();
    Wire.requestFrom(DS3231_I2C_ADDRESS, 19);

    while(Wire.available()) {
        Rseconds = Wire.read();
        Rminutes = Wire.read();
        Rhours = Wire.read();
        Rdayof = Wire.read();
        Rday = Wire.read();
        Rmonth = Wire.read();
        Ryear = Wire.read();
        R07 = Wire.read();
        R08 = Wire.read();
        R09 = Wire.read();
        R0A = Wire.read();
        R0B = Wire.read();
        R0C = Wire.read();
        R0D = Wire.read();
        R0E = Wire.read();
        R0F = Wire.read();
        R10 = Wire.read();
        R11 = Wire.read();
        R12 = Wire.read();
    }
    displayTime();
    Serial.println(" ");
    Serial.println("Registi del DS3231 in hex :");Serial.println(" ");
    Serial.print("  R00 R01 R02 ->  ");Serial.print(Rhours,HEX);Serial.print(":");Serial.print(Rminutes,HEX);Serial.print(":"); Serial.println(Rseconds,HEX);
    Serial.print("  R03 -> "); Serial.println(Rdayof,HEX);
    Serial.print("  R04 -> "); Serial.print(Rday,HEX);Serial.print("/");Serial.print(Rmonth,HEX);Serial.print("/");Serial.println(Ryear,HEX);
    Serial.println(" ");

    Serial.println("Allarme 1");
    Serial.print("  R07 -> "); Serial.println(R07,BIN);
    Serial.print("  R08 -> "); Serial.println(R07,BIN);
    Serial.print("  R09 -> "); Serial.println(R07,BIN);
    Serial.print("  R0A -> "); Serial.println(R0A,BIN);
    Serial.println(" ");

    Serial.println("Allarme 2");
    Serial.print("  R0B -> "); Serial.println(R0B,BIN);
    Serial.print("  R0C -> "); Serial.println(R0C,BIN);
    Serial.print("  R0D -> "); Serial.println(R0D,BIN);
    Serial.println(" ");

    Serial.println("Control");
    Serial.print("  R0E -> "); Serial.println(R0E,BIN);
    Serial.println(" ");

    Serial.println("Status");
    Serial.print("  R0F -> "); Serial.println(R0F,BIN);
    Serial.println(" ");

    Serial.println("Aging");
    Serial.print("  R10 -> "); Serial.println(R10,BIN);
    Serial.println(" ");

    Serial.println(" ");
    Serial.print("  R11 -> "); Serial.println(R11,BIN);
    Serial.print("  R12 -> "); Serial.println(R12,BIN);

    Serial.print(" Temperatura Â°C "); Serial.println(DS3231_get_treg());  // stampa la temperatura
}
//-----------------------------------------------------------------------------
void WriteString(char testo[], int col, int linea)  {
    // riceve il testo e la col da cui partire. Linea 0 o 1
    lung = strlen(testo)-1;   // calcola la lunghezza del testo e sottrae il \0
    for (i=0; i <= lung; i++) { // loop per scrivere
        lcd.setCursor(i + col , linea); // posiziona il cursore
        lcd.print(testo[i]);            // scrive il testo
    }
}
//-----------------------------------------------------------------------------
void WriteTime(int col, int linea) {
    // scrive HH:MM:SS alla colonna col e sulla linea 0 o 1
    byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;
    // retrieve data from DS3231
    readDS3231time(&second, &minute, &hour, &dayOfWeek, &dayOfMonth, &month, &year);
// - - - - - - - - - - stampa le ore - - - - - - - - - - - - -
    lcd.setCursor(col, linea);
    if (hour<10) {
        lcd.print("0");
        lcd.print(hour);
    }
    else {
        lcd.print(int(hour/10));
        lcd.print(hour-(int(hour/10)*10));
    }
// - - - - - - - - - - stampa i minuti - - - - - - - - - - - -
    lcd.setCursor(col+3, linea);
    if (minute<10) {
        lcd.print("0");
        lcd.print(minute);
    }
    else {
        lcd.print(int(minute/10));
        lcd.print(minute-(int(minute/10)*10));
    }
// - - - - - - - - - - stampa i secondi  - - - - - - - - - - -
    lcd.setCursor(col+6, linea);
    if (second<10) {
        lcd.print("0");
        lcd.print(second);
    }
    else {
        lcd.print(int(second/10));
        lcd.print(second-(int(second/10)*10));
    }
}
//-----------------------------------------------------------------------------
float DS3231_get_treg() {
    float rv;
//    int rv;  // Reads the temperature as an int, to save memory

    uint8_t temp_msb, temp_lsb;
    int8_t nint;

    Wire.beginTransmission(DS3231_I2C_ADDRESS);
    Wire.write(DS3231_TEMPERATURE_ADDR);
    Wire.endTransmission();

    Wire.requestFrom(DS3231_I2C_ADDRESS, 2);
    temp_msb = Wire.read();
    temp_lsb = Wire.read() >> 6;

    if ((temp_msb & 0x80) != 0) {
        nint = temp_msb | ~((1 << 8) - 1);}      // if negative get two's complement
    else {nint = temp_msb;}

    rv = 0.25 * temp_lsb + nint;
    return rv;
}
//-----------------------------------------------------------------------------
void stampaGradi(float gradiC, int col, int linea) {   // su LCD i gradi da colonna su linea

    // ATTENZIONE: il valore gradiC devono essere da -32000 a +32000
    //  oltre si sballa tutto. Converte solo 3 decimali
    String stringVal = "";      // reset della stringa

    stringVal = String(int(gradiC)) + "." + String(getDecimali(gradiC));
    char charVal[stringVal.length()+1];

    if (gradiC >= 0) {      // se gradi=>0 mette il + davanti alla cifra da stampare
        stringVal =  "+" + stringVal;
    }

    stringVal.toCharArray(charVal,stringVal.length()-1); // +1

    WriteString(charVal, 1, 1);     // solo questo OK
}       // esce da stampaGradi
// ============================================================================
//function to extract decimal part of float
long getDecimali(float val) {
    int intPart = int(val);     // prende la parte intera es. di 317,23 ottiene 317
    long decPart = 1000 * (val - intPart);  // ottengo prima 0,23 poi 230 (moltiplicato per 1000) x 3 decimali
    //Serial.print("parte intera del numero    :");Serial.println(intPart);
    //Serial.print("parte decimale del numero  :");Serial.println(decPart);
    if (decPart > 0) { return(decPart);} // se c'e' ritorna la parte decimale
    else if(decPart < 0) { return((-1)*decPart);} // se negativo, moltiplica per -1
    else { return(0);}                  //return 0 se non c'e' parte decimale
}
//=============================================================================
//=============================================================================
//=============================================================================
